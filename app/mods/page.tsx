"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Save, Download, Play, Plus, X, Palmtree } from "lucide-react"
import dynamic from "next/dynamic"
import Link from "next/link"

// Dynamically import the Monaco editor to avoid SSR issues
const MonacoEditor = dynamic(() => import("@monaco-editor/react"), { ssr: false })

// Sample initial LUA code for Tropik
const initialCode = `-- Welcome to the Tropik Mod Editor
-- Create custom scripts for your Tropik VR experience

function OnPlayerSpawn()
  print("Welcome to Tropik!")
  
  -- Set up player properties
  player.health = 100
  player.energy = 100
  player.swimSpeed = 1.0
  
  -- Register event handlers for Tropik
  RegisterEvent("OnIslandEnter", OnIslandEnter)
  RegisterEvent("OnAxolotlInteract", OnAxolotlInteract)
end

function OnIslandEnter(islandName)
  -- Custom logic when entering different islands
  if islandName == "MainHub" then
    print("Welcome to the Main Island Hub!")
    SpawnNPC("TalkingTree", Vector3(10, 0, 5))
  elseif islandName == "CityIsland" then
    print("Welcome to City Island!")
    player.swimSpeed = 0.8 -- Slower in urban areas
  elseif islandName == "SpaceIsland" then
    print("Welcome to Space Island!")
    SetGravity(0.3) -- Low gravity on space island
  end
end

function OnAxolotlInteract(axolotl)
  -- Custom axolotl interactions
  print("Interacting with friendly axolotl!")
  axolotl.happiness = axolotl.happiness + 10
  
  if axolotl.happiness > 50 then
    axolotl.followPlayer = true
  end
end

-- Initialize the mod
OnPlayerSpawn()
`

// Sample saved mods for Tropik
const sampleMods = [
  {
    id: "mod1",
    name: "Enhanced Swimming",
    description: "Improved swimming mechanics and underwater exploration",
    code: `-- Enhanced Swimming Mod for Tropik\nfunction OnPlayerSpawn()\n  player.swimSpeed = 2.0\n  player.underwaterTime = 300\nend\n\nOnPlayerSpawn()`,
  },
  {
    id: "mod2",
    name: "Friendly NPCs",
    description: "Makes all NPCs more interactive and helpful",
    code: `-- Friendly NPCs Mod\nfunction OnNPCInteract(npc)\n  npc.friendliness = 100\n  npc.helpfulness = true\n  print("NPC is now extra friendly!")\nend`,
  },
  {
    id: "mod3",
    name: "Island Explorer",
    description: "Adds exploration bonuses and hidden secrets",
    code: `-- Island Explorer Mod\nfunction OnIslandEnter(island)\n  player.explorationBonus = 1.5\n  SpawnHiddenTreasure(island)\nend`,
  },
]

export default function ModsPage() {
  const [code, setCode] = useState(initialCode)
  const [modName, setModName] = useState("")
  const [modDescription, setModDescription] = useState("")
  const [savedMods, setSavedMods] = useState(sampleMods)
  const [activeTab, setActiveTab] = useState("editor")
  const [selectedMod, setSelectedMod] = useState<string | null>(null)
  const [editorTheme, setEditorTheme] = useState("vs-dark")

  // Load saved mods from localStorage on component mount
  useEffect(() => {
    const storedMods = localStorage.getItem("tropikMods")
    if (storedMods) {
      setSavedMods(JSON.parse(storedMods))
    }
  }, [])

  // Save mods to localStorage when they change
  useEffect(() => {
    localStorage.setItem("tropikMods", JSON.stringify(savedMods))
  }, [savedMods])

  // Handle saving a mod
  const handleSaveMod = () => {
    if (!modName) {
      alert("Please enter a mod name")
      return
    }

    const newMod = {
      id: `mod-${Date.now()}`,
      name: modName,
      description: modDescription || "Custom Tropik mod",
      code,
    }

    setSavedMods([...savedMods, newMod])
    setModName("")
    setModDescription("")
    alert("Tropik mod saved successfully!")
  }

  // Handle loading a mod
  const handleLoadMod = (modId: string) => {
    const mod = savedMods.find((m) => m.id === modId)
    if (mod) {
      setCode(mod.code)
      setModName(mod.name)
      setModDescription(mod.description)
      setActiveTab("editor")
    }
  }

  // Handle deleting a mod
  const handleDeleteMod = (modId: string) => {
    if (confirm("Are you sure you want to delete this mod?")) {
      setSavedMods(savedMods.filter((m) => m.id !== modId))
    }
  }

  // Handle downloading a mod as .lua file
  const handleDownloadMod = (modId: string) => {
    const mod = savedMods.find((m) => m.id === modId)
    if (!mod) return

    const luaContent = `-- ${mod.name}\n-- ${mod.description}\n-- Generated by Tropik Mod Editor\n\n${mod.code}`
    const blob = new Blob([luaContent], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${mod.name.replace(/\s+/g, "_")}.lua`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  // Handle downloading current editor content
  const handleDownloadCurrent = () => {
    if (!modName) {
      alert("Please enter a mod name before downloading")
      return
    }

    const luaContent = `-- ${modName}\n-- ${modDescription || "Custom Tropik mod"}\n-- Generated by Tropik Mod Editor\n\n${code}`
    const blob = new Blob([luaContent], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${modName.replace(/\s+/g, "_")}.lua`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="container py-8">
      <div className="flex flex-col space-y-4">
        <div className="flex items-center gap-3">
          <Palmtree className="h-8 w-8 text-emerald-500" />
          <div>
            <h1 className="text-3xl font-bold">Tropik Mod Editor</h1>
            <p className="text-muted-foreground">Create and share LUA mods for Tropik VR</p>
          </div>
        </div>

        <div className="bg-emerald-50 dark:bg-emerald-950/20 border border-emerald-200 dark:border-emerald-800 rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <Palmtree className="h-5 w-5 text-emerald-600" />
            <h3 className="font-semibold text-emerald-800 dark:text-emerald-200">Tropik Modding</h3>
          </div>
          <p className="text-sm text-emerald-700 dark:text-emerald-300">
            Create custom LUA scripts to enhance your Tropik VR experience. Modify player abilities, island
            interactions, NPC behaviors, and more! All mods are downloaded as .lua files for use in Tropik.
          </p>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="editor">LUA Editor</TabsTrigger>
            <TabsTrigger value="library">Mod Library</TabsTrigger>
          </TabsList>

          <TabsContent value="editor" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Palmtree className="h-5 w-5 text-emerald-500" />
                  Tropik LUA Mod Editor
                </CardTitle>
                <CardDescription>
                  Write your mod code using LUA. Access Tropik's game APIs through player, island, and NPC objects.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid w-full gap-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="mod-name">Mod Name</Label>
                      <Input
                        id="mod-name"
                        placeholder="Enter mod name"
                        value={modName}
                        onChange={(e) => setModName(e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="mod-description">Description</Label>
                      <Input
                        id="mod-description"
                        placeholder="Brief description of your mod"
                        value={modDescription}
                        onChange={(e) => setModDescription(e.target.value)}
                      />
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <Label>Code Editor</Label>
                    <div className="flex gap-2">
                      <Button
                        variant={editorTheme === "vs-light" ? "default" : "outline"}
                        size="sm"
                        onClick={() => setEditorTheme("vs-light")}
                      >
                        Light Mode
                      </Button>
                      <Button
                        variant={editorTheme === "vs-dark" ? "default" : "outline"}
                        size="sm"
                        onClick={() => setEditorTheme("vs-dark")}
                      >
                        Dark Mode
                      </Button>
                    </div>
                  </div>

                  <div className="border rounded-md overflow-hidden" style={{ height: "500px" }}>
                    <MonacoEditor
                      height="100%"
                      language="lua"
                      theme={editorTheme}
                      value={code}
                      onChange={(value) => setCode(value || "")}
                      options={{
                        minimap: { enabled: false },
                        scrollBeyondLastLine: false,
                        fontSize: 14,
                        wordWrap: "on",
                        automaticLayout: true,
                      }}
                    />
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <div className="flex space-x-2">
                  <Button variant="outline" onClick={() => setCode(initialCode)}>
                    Reset
                  </Button>
                  <Button variant="outline" className="gap-2">
                    <Play className="h-4 w-4" />
                    Test Syntax
                  </Button>
                </div>
                <div className="flex space-x-2">
                  <Link href="https://discord.gg/GBcuCSbktX">
                    <Button size="sm">Join Discord</Button>
                  </Link>
                  <Button onClick={handleDownloadCurrent} variant="outline" className="gap-2">
                    <Download className="h-4 w-4" />
                    Download .lua
                  </Button>
                  <Button onClick={handleSaveMod} className="gap-2">
                    <Save className="h-4 w-4" />
                    Save Mod
                  </Button>
                </div>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="library">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Palmtree className="h-5 w-5 text-emerald-500" />
                  Your Tropik Mod Library
                </CardTitle>
                <CardDescription>Browse, load, and download your saved Tropik mods</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {savedMods.map((mod) => (
                    <Card
                      key={mod.id}
                      className={`overflow-hidden ${selectedMod === mod.id ? "ring-2 ring-emerald-500" : ""}`}
                    >
                      <CardHeader className="pb-2">
                        <CardTitle className="text-lg flex items-center gap-2">
                          <Palmtree className="h-4 w-4 text-emerald-500" />
                          {mod.name}
                        </CardTitle>
                        <CardDescription>{mod.description}</CardDescription>
                      </CardHeader>
                      <CardContent className="pb-2">
                        <div className="bg-muted rounded-md p-2 h-24 overflow-hidden text-xs font-mono">
                          {mod.code.slice(0, 150)}
                          {mod.code.length > 150 && "..."}
                        </div>
                      </CardContent>
                      <CardFooter className="flex justify-between">
                        <Button variant="ghost" size="sm" onClick={() => handleLoadMod(mod.id)}>
                          Edit
                        </Button>
                        <div className="flex space-x-1">
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleDownloadMod(mod.id)}
                            title="Download as .lua file"
                          >
                            <Download className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleDeleteMod(mod.id)}
                            className="text-destructive"
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      </CardFooter>
                    </Card>
                  ))}

                  <Card className="flex flex-col items-center justify-center p-6 h-full">
                    <Button
                      variant="outline"
                      className="h-12 w-12 rounded-full mb-4"
                      onClick={() => {
                        setCode(initialCode)
                        setModName("")
                        setModDescription("")
                        setActiveTab("editor")
                      }}
                    >
                      <Plus className="h-6 w-6" />
                    </Button>
                    <p className="text-center font-medium">Create New Tropik Mod</p>
                  </Card>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Tropik Modding Guide */}
        <Card className="mt-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Palmtree className="h-5 w-5 text-emerald-500" />
              Tropik Modding Guide
            </CardTitle>
            <CardDescription>Learn how to create mods for Tropik VR</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold mb-2">Available APIs</h4>
                <ul className="text-sm space-y-1 text-muted-foreground">
                  <li>
                    • <code>player</code> - Player properties and abilities
                  </li>
                  <li>
                    • <code>island</code> - Island-specific functions
                  </li>
                  <li>
                    • <code>npc</code> - NPC interaction and behavior
                  </li>
                  <li>
                    • <code>axolotl</code> - Axolotl companion system
                  </li>
                  <li>
                    • <code>physics</code> - Physics and movement controls
                  </li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold mb-2">Common Events</h4>
                <ul className="text-sm space-y-1 text-muted-foreground">
                  <li>
                    • <code>OnPlayerSpawn()</code> - Player initialization
                  </li>
                  <li>
                    • <code>OnIslandEnter(island)</code> - Island transitions
                  </li>
                  <li>
                    • <code>OnAxolotlInteract(axolotl)</code> - Axolotl interactions
                  </li>
                  <li>
                    • <code>OnNPCInteract(npc)</code> - NPC conversations
                  </li>
                  <li>
                    • <code>OnSwimStart()</code> - Swimming mechanics
                  </li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
